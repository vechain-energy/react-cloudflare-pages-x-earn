{
  "address": "0x119565E41B9c640DA3E046197ac816D39D5eEd9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IX2EarnRewardsPool",
          "name": "_rewardsPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPool",
      "outputs": [
        {
          "internalType": "contract IX2EarnRewardsPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64a124b9e39c5a03254532d5a227e02d760bf9c110c83d34e4c594caca1f3f5c",
  "receipt": {
    "to": null,
    "from": "0xaA795C9b7C3E7647a5E08016765bcecC4faFE39F",
    "contractAddress": "0x119565E41B9c640DA3E046197ac816D39D5eEd9b",
    "transactionIndex": 0,
    "gasUsed": "291322",
    "logsBloom": "0x
    "blockHash": "0x012dd8c13e309e63b0b2ef1f68e56c94518eaf0167509ddf1ba109babfc92aef",
    "transactionHash": "0x64a124b9e39c5a03254532d5a227e02d760bf9c110c83d34e4c594caca1f3f5c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19781825,
        "transactionHash": "0x64a124b9e39c5a03254532d5a227e02d760bf9c110c83d34e4c594caca1f3f5c",
        "address": "0x119565E41B9c640DA3E046197ac816D39D5eEd9b",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x000000000000000000000000aa795c9b7c3e7647a5e08016765bcecc4fafe39f",
        "logIndex": 0,
        "blockHash": "0x012dd8c13e309e63b0b2ef1f68e56c94518eaf0167509ddf1ba109babfc92aef"
      }
    ],
    "blockNumber": 19781825,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8947FD34c54254569A3551E77F7Ed0058e3d55A6"
  ],
  "numDeployments": 2,
  "solcInputHash": "544c2e7f5e3fde76be0c9ebfdbae2382",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IX2EarnRewardsPool\",\"name\":\"_rewardsPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"contract IX2EarnRewardsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/X2EarnApp.sol\":\"X2EarnApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/X2EarnApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IX2EarnRewardsPool.sol\\\";\\n\\ncontract X2EarnApp {\\n    IX2EarnRewardsPool public rewardsPool;\\n    constructor(IX2EarnRewardsPool _rewardsPool) {\\n        rewardsPool = _rewardsPool;\\n    }\\n\\n    function reward() public {\\n        rewardsPool.distributeReward(bytes32(0), 1, msg.sender, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x328fd1721ca5776163231c5d5e317ddd0c0c2ff7eb3829175d45ed725310c243\",\"license\":\"MIT\"},\"contracts/interfaces/IX2EarnRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IX2EarnRewardsPool\\n * @dev Interface designed to be used by a contract that allows x2Earn apps to reward users that performed sustainable actions.\\n * Funds can be deposited into this contract by specifying the app id that can access the funds.\\n * Admins of x2EarnApps can withdraw funds from the rewards pool, whihc are sent to the team wallet.\\n */\\ninterface IX2EarnRewardsPool {\\n    /**\\n     * @dev Event emitted when a new deposit is made into the rewards pool.\\n     *\\n     * @param amount The amount of $B3TR deposited.\\n     * @param appId The ID of the app for which the deposit was made.\\n     * @param depositor The address of the user that deposited the funds.\\n     */\\n    event NewDeposit(uint256 amount, bytes32 indexed appId, address indexed depositor);\\n\\n    /**\\n     * @dev Event emitted when a team withdraws funds from the rewards pool.\\n     *\\n     * @param amount The amount of $B3TR withdrawn.\\n     * @param appId The ID of the app for which the withdrawal was made.\\n     * @param teamWallet The address of the team wallet that received the funds.\\n     * @param withdrawer The address of the user that withdrew the funds.\\n     * @param reason The reason for the withdrawal.\\n     */\\n    event TeamWithdrawal(uint256 amount, bytes32 indexed appId, address indexed teamWallet, address withdrawer, string reason);\\n\\n    /**\\n     * @dev Event emitted when a reward is emitted by an app.\\n     *\\n     * @param amount The amount of $B3TR rewarded.\\n     * @param appId The ID of the app that emitted the reward.\\n     * @param receiver The address of the user that received the reward.\\n     * @param proof The proof of the sustainable action that was performed.\\n     * @param distributor The address of the user that distributed the reward.\\n     */\\n    event RewardDistributed(uint256 amount, bytes32 indexed appId, address indexed receiver, string proof, address indexed distributor);\\n\\n    /**\\n     * @dev Retrieves the current version of the contract.\\n     *\\n     * @return The version of the contract.\\n     */\\n    function version() external pure returns (string memory);\\n\\n    /**\\n     * @dev Function used by x2earn apps to deposit funds into the rewards pool.\\n     *\\n     * @param amount The amount of $B3TR to deposit.\\n     * @param appId The ID of the app.\\n     */\\n    function deposit(uint256 amount, bytes32 appId) external returns (bool);\\n\\n    /**\\n     * @dev Function used by x2earn apps to withdraw funds from the rewards pool.\\n     *\\n     * @param amount The amount of $B3TR to withdraw.\\n     * @param appId The ID of the app.\\n     * @param reason The reason for the withdrawal.\\n     */\\n    function withdraw(uint256 amount, bytes32 appId, string memory reason) external;\\n\\n    /**\\n     * @dev Gets the amount of funds available for an app to reward users.\\n     *\\n     * @param appId The ID of the app.\\n     */\\n    function availableFunds(bytes32 appId) external view returns (uint256);\\n\\n    /**\\n     * @dev Function used by x2earn apps to reward users that performed sustainable actions.\\n     *\\n     * @param appId the app id that is emitting the reward\\n     * @param amount the amount of B3TR token the user is rewarded with\\n     * @param receiver the address of the user that performed the sustainable action and is rewarded\\n     * @param proof deprecated argument, pass an empty string instead\\n     */\\n    function distributeReward(bytes32 appId, uint256 amount, address receiver, string memory proof) external;\\n\\n    /**\\n     * @dev Function used by x2earn apps to reward users that performed sustainable actions.\\n     * @notice This function is depracted in favor of distributeRewardWithProof.\\n     *\\n     * @param appId the app id that is emitting the reward\\n     * @param amount the amount of B3TR token the user is rewarded with\\n     * @param receiver the address of the user that performed the sustainable action and is rewarded\\n     * @param proof the JSON string that contains the proof and impact of the sustainable action\\n     */\\n    function distributeRewardDeprecated(bytes32 appId, uint256 amount, address receiver, string memory proof) external;\\n\\n    /**\\n     * @dev Function used by x2earn apps to reward users that performed sustainable actions.\\n     *\\n     * @param appId the app id that is emitting the reward\\n     * @param amount the amount of B3TR token the user is rewarded with\\n     * @param receiver the address of the user that performed the sustainable action and is rewarded\\n     * @param proofTypes the types of the proof of the sustainable action\\n     * @param proofValues the values of the proof of the sustainable action\\n     * @param impactCodes the codes of the impacts of the sustainable action\\n     * @param impactValues the values of the impacts of the sustainable action\\n     * @param description the description of the sustainable action\\n     */\\n    function distributeRewardWithProof(\\n        bytes32 appId,\\n        uint256 amount,\\n        address receiver,\\n        string[] memory proofTypes, // link, image, video, text, etc.\\n        string[] memory proofValues, // \\\"https://...\\\", \\\"Qm...\\\", etc.,\\n        string[] memory impactCodes, // carbon, water, etc.\\n        uint256[] memory impactValues, // 100, 200, etc.,\\n        string memory description\\n    ) external;\\n\\n    /**\\n     * @dev Builds the JSON proof string that will be stored\\n     * on chain regarding the proofs, impacts and description of the sustainable action.\\n     *\\n     * @param proofTypes the types of the proof of the sustainable action\\n     * @param proofValues the values of the proof of the sustainable action\\n     * @param impactCodes the codes of the impacts of the sustainable action\\n     * @param impactValues the values of the impacts of the sustainable action\\n     * @param description the description of the sustainable action\\n     */\\n    function buildProof(\\n        string[] memory proofTypes, // link, photo, video, text, etc.\\n        string[] memory proofValues, // \\\"https://...\\\", \\\"Qm...\\\", etc.,\\n        string[] memory impactCodes, // carbon, water, etc.\\n        uint256[] memory impactValues, // 100, 200, etc.,\\n        string memory description\\n    ) external returns (string memory);\\n}\",\"keccak256\":\"0x0a1fbcdb710612b58e53b204913eefad09637a63fd502e2c8c46aad5ed9c78bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610415380380610415833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b6102ec806101296000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630359fea91461003b578063228cb73314610059575b600080fd5b610043610063565b604051610050919061019b565b60405180910390f35b610061610087565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7335f116000801b6001336040518463ffffffff1660e01b81526004016100e89392919061026c565b600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061016161015c6101578461011c565b61013c565b61011c565b9050919050565b600061017382610146565b9050919050565b600061018582610168565b9050919050565b6101958161017a565b82525050565b60006020820190506101b0600083018461018c565b92915050565b6000819050919050565b6101c9816101b6565b82525050565b6000819050919050565b6000819050919050565b60006101fe6101f96101f4846101cf565b61013c565b6101d9565b9050919050565b61020e816101e3565b82525050565b600061021f8261011c565b9050919050565b61022f81610214565b82525050565b600082825260208201905092915050565b50565b6000610256600083610235565b915061026182610246565b600082019050919050565b600060808201905061028160008301866101c0565b61028e6020830185610205565b61029b6040830184610226565b81810360608301526102ac81610249565b905094935050505056fea26469706673582212200ae4f2865b5d01a01c5a88f4e7775b43ca840069f71421cf8870abc9c996cbbf64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630359fea91461003b578063228cb73314610059575b600080fd5b610043610063565b604051610050919061019b565b60405180910390f35b610061610087565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7335f116000801b6001336040518463ffffffff1660e01b81526004016100e89392919061026c565b600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061016161015c6101578461011c565b61013c565b61011c565b9050919050565b600061017382610146565b9050919050565b600061018582610168565b9050919050565b6101958161017a565b82525050565b60006020820190506101b0600083018461018c565b92915050565b6000819050919050565b6101c9816101b6565b82525050565b6000819050919050565b6000819050919050565b60006101fe6101f96101f4846101cf565b61013c565b6101d9565b9050919050565b61020e816101e3565b82525050565b600061021f8261011c565b9050919050565b61022f81610214565b82525050565b600082825260208201905092915050565b50565b6000610256600083610235565b915061026182610246565b600082019050919050565b600060808201905061028160008301866101c0565b61028e6020830185610205565b61029b6040830184610226565b81810360608301526102ac81610249565b905094935050505056fea26469706673582212200ae4f2865b5d01a01c5a88f4e7775b43ca840069f71421cf8870abc9c996cbbf64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2409,
        "contract": "contracts/X2EarnApp.sol:X2EarnApp",
        "label": "rewardsPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IX2EarnRewardsPool)2579"
      }
    ],
    "types": {
      "t_contract(IX2EarnRewardsPool)2579": {
        "encoding": "inplace",
        "label": "contract IX2EarnRewardsPool",
        "numberOfBytes": "20"
      }
    }
  }
}